(()=>{"use strict";const e=(e,o)=>`${e.charAt(0)}. ${o}`,o=class{constructor(e,o){this.firstName=e,this.lastName=o}workOnHomework(){return"Currently working"}displayName(){return this.firstName}},n={firstName:"John",fullTimeEmployee:!1,lastName:"Doe",location:"London",contract:!1};console.log("Teacher 3:",n);const t={firstName:"Emily",lastName:"Clark",fullTimeEmployee:!0,yearsOfExperience:5,location:"New York"};console.log("Teacher 4:",t);const r={firstName:"John",lastName:"Doe",location:"London",fullTimeEmployee:!0,numberOfReports:17};console.log("Director 1:",r);const s=e("John","Doe");console.log("Printed Teacher Name (John Doe):",s);const l=e("Alice","Smith");console.log("Printed Teacher Name (Alice Smith):",l);const a=new o("Alice","Johnson");console.log("Student 1 First Name:",a.firstName),console.log("Student 1 Last Name:",a.lastName),console.log("Student 1 Work:",a.workOnHomework()),console.log("Student 1 Display Name:",a.displayName());const i=new o("Bob","Williams");console.log("Student 2 Display Name:",i.displayName()),document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("app");e?e.innerHTML=`\n      <h2>Teacher Details:</h2>\n      <h3>Teacher 3:</h3>\n      <pre>${JSON.stringify(n,null,2)}</pre>\n      <h3>Teacher 4:</h3>\n      <pre>${JSON.stringify(t,null,2)}</pre>\n      <h2>Director Details:</h2>\n      <h3>Director 1:</h3>\n      <pre>${JSON.stringify(r,null,2)}</pre>\n      <h2>Printed Teacher Names:</h2>\n      <p>John Doe: <strong>${s}</strong></p>\n      <p>Alice Smith: <strong>${l}</strong></p>\n      <h2>Student Details:</h2>\n      <p>Student 1: <strong>${a.displayName()}</strong> - ${a.workOnHomework()}</p>\n      <p>Student 2: <strong>${i.displayName()}</strong> - ${i.workOnHomework()}</p>\n    `:console.error("Element with ID 'app' not found.")})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkF1QkEsTUFBTUEsRUFBcUMsQ0FBQ0MsRUFBbUJDLElBQ3RELEdBQUdELEVBQVVFLE9BQU8sT0FBT0QsSUFvQjlCRSxFQUFtQyxNQUd2QyxXQUFBQyxDQUFtQkosRUFBMEJDLEdBQTFCLEtBQUFELFVBQUFBLEVBQTBCLEtBQUFDLFNBQUFBLENBQW1CLENBRWhFLGNBQUFJLEdBQ0UsTUFBTyxtQkFDVCxDQUVBLFdBQUFDLEdBQ0UsT0FBT0MsS0FBS1AsU0FDZCxHQU1JUSxFQUFvQixDQUN4QlIsVUFBVyxPQUNYUyxrQkFBa0IsRUFDbEJSLFNBQVUsTUFDVlMsU0FBVSxTQUNWQyxVQUFVLEdBRVpDLFFBQVFDLElBQUksYUFBY0wsR0FFMUIsTUFBTU0sRUFBb0IsQ0FDeEJkLFVBQVcsUUFDWEMsU0FBVSxRQUNWUSxrQkFBa0IsRUFDbEJNLGtCQUFtQixFQUNuQkwsU0FBVSxZQUVaRSxRQUFRQyxJQUFJLGFBQWNDLEdBRTFCLE1BQU1FLEVBQXVCLENBQzNCaEIsVUFBVyxPQUNYQyxTQUFVLE1BQ1ZTLFNBQVUsU0FDVkQsa0JBQWtCLEVBQ2xCUSxnQkFBaUIsSUFFbkJMLFFBQVFDLElBQUksY0FBZUcsR0FFM0IsTUFBTUUsRUFBcUJuQixFQUFhLE9BQVEsT0FDaERhLFFBQVFDLElBQUksbUNBQW9DSyxHQUVoRCxNQUFNQyxFQUFzQnBCLEVBQWEsUUFBUyxTQUNsRGEsUUFBUUMsSUFBSSxzQ0FBdUNNLEdBR25ELE1BQU1DLEVBQWtDLElBQUlqQixFQUFhLFFBQVMsV0FDbEVTLFFBQVFDLElBQUksd0JBQXlCTyxFQUFTcEIsV0FDOUNZLFFBQVFDLElBQUksdUJBQXdCTyxFQUFTbkIsVUFDN0NXLFFBQVFDLElBQUksa0JBQW1CTyxFQUFTZixrQkFDeENPLFFBQVFDLElBQUksMEJBQTJCTyxFQUFTZCxlQUVoRCxNQUFNZSxFQUFrQyxJQUFJbEIsRUFBYSxNQUFPLFlBQ2hFUyxRQUFRQyxJQUFJLDBCQUEyQlEsRUFBU2YsZUFLaERnQixTQUFTQyxpQkFBaUIsbUJBQW9CLEtBQzVDLE1BQU1DLEVBQWFGLFNBQVNHLGVBQWUsT0FDdkNELEVBQ0ZBLEVBQVdFLFVBQVksNEVBR2RDLEtBQUtDLFVBQVVwQixFQUFVLEtBQU0sbURBRS9CbUIsS0FBS0MsVUFBVWQsRUFBVSxLQUFNLHNGQUcvQmEsS0FBS0MsVUFBVVosRUFBVyxLQUFNLCtFQUVoQkUsaURBQ0dDLGdGQUVGQyxFQUFTZCw0QkFBNEJjLEVBQVNmLHFEQUM5Q2dCLEVBQVNmLDRCQUE0QmUsRUFBU2hCLDZCQUd4RU8sUUFBUWlCLE1BQU0scUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrXzEvLi9qcy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGpzL21haW4udHNcclxuXHJcbi8vIERlZmluZSB0aGUgVGVhY2hlciBpbnRlcmZhY2VcclxuaW50ZXJmYWNlIFRlYWNoZXIge1xyXG4gIHJlYWRvbmx5IGZpcnN0TmFtZTogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IGxhc3ROYW1lOiBzdHJpbmc7XHJcbiAgZnVsbFRpbWVFbXBsb3llZTogYm9vbGVhbjtcclxuICB5ZWFyc09mRXhwZXJpZW5jZT86IG51bWJlcjtcclxuICBsb2NhdGlvbjogc3RyaW5nO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuLy8gRGVmaW5lIHRoZSBEaXJlY3RvcnMgaW50ZXJmYWNlIHRoYXQgZXh0ZW5kcyBUZWFjaGVyXHJcbmludGVyZmFjZSBEaXJlY3RvcnMgZXh0ZW5kcyBUZWFjaGVyIHtcclxuICBudW1iZXJPZlJlcG9ydHM6IG51bWJlcjtcclxufVxyXG5cclxuLy8gSW50ZXJmYWNlIGZvciB0aGUgcHJpbnRUZWFjaGVyIGZ1bmN0aW9uXHJcbmludGVyZmFjZSBwcmludFRlYWNoZXJGdW5jdGlvbiB7XHJcbiAgKGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nKTogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBJbXBsZW1lbnQgdGhlIHByaW50VGVhY2hlciBmdW5jdGlvblxyXG5jb25zdCBwcmludFRlYWNoZXI6IHByaW50VGVhY2hlckZ1bmN0aW9uID0gKGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gYCR7Zmlyc3ROYW1lLmNoYXJBdCgwKX0uICR7bGFzdE5hbWV9YDtcclxufTtcclxuXHJcblxyXG4vLyAtLS0gTmV3OiBTdHVkZW50Q2xhc3MgSW50ZXJmYWNlcyBhbmQgQ2xhc3MgLS0tXHJcblxyXG4vLyBJbnRlcmZhY2UgZm9yIHRoZSBTdHVkZW50Q2xhc3MgaW5zdGFuY2VcclxuaW50ZXJmYWNlIFN0dWRlbnRDbGFzc0ludGVyZmFjZSB7XHJcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XHJcbiAgbGFzdE5hbWU6IHN0cmluZztcclxuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmc7XHJcbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBJbnRlcmZhY2UgZm9yIHRoZSBTdHVkZW50Q2xhc3MgY29uc3RydWN0b3JcclxuaW50ZXJmYWNlIFN0dWRlbnRDb25zdHJ1Y3RvciB7XHJcbiAgbmV3IChmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyk6IFN0dWRlbnRDbGFzc0ludGVyZmFjZTtcclxufVxyXG5cclxuLy8gSW1wbGVtZW50IHRoZSBTdHVkZW50Q2xhc3NcclxuY29uc3QgU3R1ZGVudENsYXNzOiBTdHVkZW50Q29uc3RydWN0b3IgPSBjbGFzcyBTdHVkZW50Q2xhc3NfIGltcGxlbWVudHMgU3R1ZGVudENsYXNzSW50ZXJmYWNlIHtcclxuICAvLyBVc2luZyAncHVibGljJyBrZXl3b3JkIGluIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgaXMgYSBUeXBlU2NyaXB0IHNob3J0Y3V0XHJcbiAgLy8gZm9yIGRlY2xhcmluZyBhbmQgaW5pdGlhbGl6aW5nIHByb3BlcnRpZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGFuZCB0eXBlLlxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBmaXJzdE5hbWU6IHN0cmluZywgcHVibGljIGxhc3ROYW1lOiBzdHJpbmcpIHt9XHJcblxyXG4gIHdvcmtPbkhvbWV3b3JrKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gXCJDdXJyZW50bHkgd29ya2luZ1wiO1xyXG4gIH1cclxuXHJcbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmZpcnN0TmFtZTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLy8gLS0tIEV4YW1wbGUgVXNhZ2UgYW5kIENvbnNvbGUgTG9ncyAtLS1cclxuXHJcbmNvbnN0IHRlYWNoZXIzOiBUZWFjaGVyID0ge1xyXG4gIGZpcnN0TmFtZTogJ0pvaG4nLFxyXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IGZhbHNlLFxyXG4gIGxhc3ROYW1lOiAnRG9lJyxcclxuICBsb2NhdGlvbjogJ0xvbmRvbicsXHJcbiAgY29udHJhY3Q6IGZhbHNlLFxyXG59O1xyXG5jb25zb2xlLmxvZygnVGVhY2hlciAzOicsIHRlYWNoZXIzKTtcclxuXHJcbmNvbnN0IHRlYWNoZXI0OiBUZWFjaGVyID0ge1xyXG4gIGZpcnN0TmFtZTogJ0VtaWx5JyxcclxuICBsYXN0TmFtZTogJ0NsYXJrJyxcclxuICBmdWxsVGltZUVtcGxveWVlOiB0cnVlLFxyXG4gIHllYXJzT2ZFeHBlcmllbmNlOiA1LFxyXG4gIGxvY2F0aW9uOiAnTmV3IFlvcmsnLFxyXG59O1xyXG5jb25zb2xlLmxvZygnVGVhY2hlciA0OicsIHRlYWNoZXI0KTtcclxuXHJcbmNvbnN0IGRpcmVjdG9yMTogRGlyZWN0b3JzID0ge1xyXG4gIGZpcnN0TmFtZTogJ0pvaG4nLFxyXG4gIGxhc3ROYW1lOiAnRG9lJyxcclxuICBsb2NhdGlvbjogJ0xvbmRvbicsXHJcbiAgZnVsbFRpbWVFbXBsb3llZTogdHJ1ZSxcclxuICBudW1iZXJPZlJlcG9ydHM6IDE3LFxyXG59O1xyXG5jb25zb2xlLmxvZygnRGlyZWN0b3IgMTonLCBkaXJlY3RvcjEpO1xyXG5cclxuY29uc3QgcHJpbnRlZFRlYWNoZXJOYW1lID0gcHJpbnRUZWFjaGVyKFwiSm9oblwiLCBcIkRvZVwiKTtcclxuY29uc29sZS5sb2coJ1ByaW50ZWQgVGVhY2hlciBOYW1lIChKb2huIERvZSk6JywgcHJpbnRlZFRlYWNoZXJOYW1lKTtcclxuXHJcbmNvbnN0IHByaW50ZWRUZWFjaGVyTmFtZTIgPSBwcmludFRlYWNoZXIoXCJBbGljZVwiLCBcIlNtaXRoXCIpO1xyXG5jb25zb2xlLmxvZygnUHJpbnRlZCBUZWFjaGVyIE5hbWUgKEFsaWNlIFNtaXRoKTonLCBwcmludGVkVGVhY2hlck5hbWUyKTtcclxuXHJcbi8vIE5ldzogU3R1ZGVudENsYXNzIEV4YW1wbGVcclxuY29uc3Qgc3R1ZGVudDE6IFN0dWRlbnRDbGFzc0ludGVyZmFjZSA9IG5ldyBTdHVkZW50Q2xhc3MoXCJBbGljZVwiLCBcIkpvaG5zb25cIik7XHJcbmNvbnNvbGUubG9nKCdTdHVkZW50IDEgRmlyc3QgTmFtZTonLCBzdHVkZW50MS5maXJzdE5hbWUpO1xyXG5jb25zb2xlLmxvZygnU3R1ZGVudCAxIExhc3QgTmFtZTonLCBzdHVkZW50MS5sYXN0TmFtZSk7XHJcbmNvbnNvbGUubG9nKCdTdHVkZW50IDEgV29yazonLCBzdHVkZW50MS53b3JrT25Ib21ld29yaygpKTtcclxuY29uc29sZS5sb2coJ1N0dWRlbnQgMSBEaXNwbGF5IE5hbWU6Jywgc3R1ZGVudDEuZGlzcGxheU5hbWUoKSk7XHJcblxyXG5jb25zdCBzdHVkZW50MjogU3R1ZGVudENsYXNzSW50ZXJmYWNlID0gbmV3IFN0dWRlbnRDbGFzcyhcIkJvYlwiLCBcIldpbGxpYW1zXCIpO1xyXG5jb25zb2xlLmxvZygnU3R1ZGVudCAyIERpc3BsYXkgTmFtZTonLCBzdHVkZW50Mi5kaXNwbGF5TmFtZSgpKTtcclxuXHJcblxyXG4vLyAtLS0gV2VicGFjay1kZXYtc2VydmVyIERpc3BsYXkgaW4gQnJvd3NlciAtLS1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgY29uc3QgYXBwRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKTtcclxuICBpZiAoYXBwRWxlbWVudCkge1xyXG4gICAgYXBwRWxlbWVudC5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDxoMj5UZWFjaGVyIERldGFpbHM6PC9oMj5cclxuICAgICAgPGgzPlRlYWNoZXIgMzo8L2gzPlxyXG4gICAgICA8cHJlPiR7SlNPTi5zdHJpbmdpZnkodGVhY2hlcjMsIG51bGwsIDIpfTwvcHJlPlxyXG4gICAgICA8aDM+VGVhY2hlciA0OjwvaDM+XHJcbiAgICAgIDxwcmU+JHtKU09OLnN0cmluZ2lmeSh0ZWFjaGVyNCwgbnVsbCwgMil9PC9wcmU+XHJcbiAgICAgIDxoMj5EaXJlY3RvciBEZXRhaWxzOjwvaDI+XHJcbiAgICAgIDxoMz5EaXJlY3RvciAxOjwvaDM+XHJcbiAgICAgIDxwcmU+JHtKU09OLnN0cmluZ2lmeShkaXJlY3RvcjEsIG51bGwsIDIpfTwvcHJlPlxyXG4gICAgICA8aDI+UHJpbnRlZCBUZWFjaGVyIE5hbWVzOjwvaDI+XHJcbiAgICAgIDxwPkpvaG4gRG9lOiA8c3Ryb25nPiR7cHJpbnRlZFRlYWNoZXJOYW1lfTwvc3Ryb25nPjwvcD5cclxuICAgICAgPHA+QWxpY2UgU21pdGg6IDxzdHJvbmc+JHtwcmludGVkVGVhY2hlck5hbWUyfTwvc3Ryb25nPjwvcD5cclxuICAgICAgPGgyPlN0dWRlbnQgRGV0YWlsczo8L2gyPlxyXG4gICAgICA8cD5TdHVkZW50IDE6IDxzdHJvbmc+JHtzdHVkZW50MS5kaXNwbGF5TmFtZSgpfTwvc3Ryb25nPiAtICR7c3R1ZGVudDEud29ya09uSG9tZXdvcmsoKX08L3A+XHJcbiAgICAgIDxwPlN0dWRlbnQgMjogPHN0cm9uZz4ke3N0dWRlbnQyLmRpc3BsYXlOYW1lKCl9PC9zdHJvbmc+IC0gJHtzdHVkZW50Mi53b3JrT25Ib21ld29yaygpfTwvcD5cclxuICAgIGA7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFbGVtZW50IHdpdGggSUQgJ2FwcCcgbm90IGZvdW5kLlwiKTtcclxuICB9XHJcbn0pOyJdLCJuYW1lcyI6WyJwcmludFRlYWNoZXIiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImNoYXJBdCIsIlN0dWRlbnRDbGFzcyIsImNvbnN0cnVjdG9yIiwid29ya09uSG9tZXdvcmsiLCJkaXNwbGF5TmFtZSIsInRoaXMiLCJ0ZWFjaGVyMyIsImZ1bGxUaW1lRW1wbG95ZWUiLCJsb2NhdGlvbiIsImNvbnRyYWN0IiwiY29uc29sZSIsImxvZyIsInRlYWNoZXI0IiwieWVhcnNPZkV4cGVyaWVuY2UiLCJkaXJlY3RvcjEiLCJudW1iZXJPZlJlcG9ydHMiLCJwcmludGVkVGVhY2hlck5hbWUiLCJwcmludGVkVGVhY2hlck5hbWUyIiwic3R1ZGVudDEiLCJzdHVkZW50MiIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFwcEVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=